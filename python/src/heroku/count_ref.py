#!/usr/bin/python
import sys, getopt
import codecs
import xml.etree.cElementTree as ET

def main(argv):
    infile = argv[0]
    MAX_LINE = 10000 #top 10K ref count
    if not infile:
        raise Exception('please provide an xml file to parse with.')
    
    #look for the output generated by the perl script
    file_name = '.'.join(str(infile).split('.')[0:-1])
    link_file_name =  file_name + ".stat.inlinks"
    out_file_name = file_name + ".output"
    src_file_name = file_name + ".hgw.xml"
    
    #load the page_id->page_title mapping
    id_to_title = get_id_by_title(src_file_name)    
    
    try:
        with codecs.open(link_file_name, 'r', encoding="utf-8") as link_file, codecs.open(out_file_name, 'w+', encoding="utf-8") as out_file:
            ln_count = 0
            for line in link_file:
                if ln_count == 0:
                    ln_count += 1
                    continue #skip the header line
                elif not line.strip():
                    continue #skip empty line
                else:
                    if ln_count <= MAX_LINE:
                        (page_id, ref_count) = tuple(line.split())
                        if int(page_id) in id_to_title:
                            try:
                                out_file.write("{0}\t{1}\n".format(str(id_to_title[int(page_id)]), str(ref_count)))
                            except UnicodeDecodeError as e:
                                #FIXME: unsolved encoding error. still write to the line, but attach with an error notice.
                                out_file.write("{0}\t{1}\t({2})\n".format(page_id, ref_count, 'Encoding error for page id {0}. {1}'.format(page_id, str(e))))
                        else:
                            #TODO: need to log an error here
                            out_file.write("{0}\t{1}\n".format(page_id, ref_count))                        
                    else:
                        break
                ln_count += 1
        print "Job finish. output is written to {0}.".format(out_file_name)
    except IOError as e:
        #TODO: log here
        print 'IO Operation failed: %s' % e.strerror
        sys.exit(0)

def get_id_by_title(src_file_name):
    ''' take the src file name, and find all the page ids and their corresponding page title'''
    print "Loading pre-processed src file {0}".format(src_file_name) 
    result = {}
    with codecs.open(src_file_name, 'r', encoding="utf-8") as src_file:
        tree = ET.ElementTree(file=src_file_name)
        for page in tree.iter(tag='page'):
            id = page.attrib['id']
            title_list = [t for t in page.iterfind('title')]
            title = None
            if len(title_list) > 0:
                title = title_list[0].text.encode('utf-8')
            if title:
                result[int(id)] = title
    return result
        
if __name__ == '__main__':
    main(sys.argv[1:])
